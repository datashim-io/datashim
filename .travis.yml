dist: focal
services:
  - docker

stages:
  - name: build_release_arm64
    if: type != pull_request AND tag IS present
  - name: build_release_amd64
    if: type != pull_request AND tag IS present
  - name: build_release_ppc64le
    if: type != pull_request AND tag IS present
  - name: push_release_multiarch
    if: type != pull_request AND tag IS present
    
  - name: build_pr_arm64
    if: type = pull_request
  - name: build_pr_amd64
    if: type = pull_request
  - name: build_pr_ppc64le
    if: type = pull_request

  - name: build_latest_arm64
    if: type != pull_request AND branch = master
  - name: build_latest_amd64
    if: type != pull_request AND branch = master
  - name: build_latest_ppc64le
    if: type != pull_request AND branch = master
  - name: push_latest_multiarch
    if: type != pull_request AND branch = master

matrix:
  include:
    # release stages
    - stage: build_release_arm64
      services:
        - docker
      os: linux
      arch: arm64
      env: 
        - COMMON_IMAGE_TAG=${TRAVIS_TAG}
        - DOCKER_REGISTRY=quay.io/datashim-io
      install: echo "no install"
      script: cd build-tools && ./build_components.sh && ./build_csi_plugins.sh

    - stage: build_release_amd64
      services:
        - docker
      os: linux
      arch: amd64
      dist: bionic
      env: 
        - COMMON_IMAGE_TAG=${TRAVIS_TAG}
        - DOCKER_REGISTRY=quay.io/datashim
      install: echo "no install"
      script: cd build-tools && ./build_components.sh && ./build_csi_plugins.sh

    - stage: build_release_ppc64le
      services:
        - docker
      os: linux
      arch: ppc64le
      env: 
        - COMMON_IMAGE_TAG=${TRAVIS_TAG}
        - DOCKER_REGISTRY=quay.io/datashim-io
      install: echo "no install"
      script: cd build-tools && ./build_components.sh && ./build_csi_plugins.sh
  
    - stage: push_release_multiarch
      services:
        - docker
      os: linux
      env: 
        - DOCKER_REGISTRY=quay.io/datashim-io
      script:
        - cd build-tools
        - make DOCKER_REGISTRY=${DOCKER_REGISTRY} push-multiarch

    # pull request stages
    - stage: build_pr_arm64
      services:
        - docker
      os: linux
      arch: arm64
      env: 
        - COMMON_IMAGE_TAG="pr_${TRAVIS_COMMIT}"
      install: echo "no install"
      script: cd build-tools && ./build_components.sh && ./build_csi_plugins.sh

    - stage: build_pr_amd64
      services:
        - docker
      os: linux
      arch: amd64
      dist: bionic
      env: 
        - COMMON_IMAGE_TAG="pr_${TRAVIS_COMMIT}"
      install: echo "no install"
      script: cd build-tools && ./build_components.sh && ./build_csi_plugins.sh

    - stage: build_pr_ppc64le
      services:
        - docker
      os: linux
      arch: ppc64le
      env: 
        - COMMON_IMAGE_TAG="pr_${TRAVIS_COMMIT}"
      install: echo "no install"
      script: cd build-tools && ./build_components.sh && ./build_csi_plugins.sh

    # master branch stages
    - stage: build_latest_arm64
      services:
        - docker
      os: linux
      arch: arm64
      env: 
        - DOCKER_REGISTRY=quay.io/datashim-io
      install: echo "no install"
      script: cd build-tools && ./build_components.sh && ./build_csi_plugins.sh

    - stage: build_latest_amd64
      services:
        - docker
      os: linux
      arch: amd64
      dist: bionic
      env: 
        - DOCKER_REGISTRY=quay.io/datashim-io
      install: echo "no install"
      script: cd build-tools && ./build_components.sh && ./build_csi_plugins.sh

    - stage: build_latest_ppc64le
      services:
        - docker
      os: linux
      arch: ppc64le
      env: 
        - DOCKER_REGISTRY=quay.io/datashim-io
      install: echo "no install"
      script: cd build-tools && ./build_components.sh && ./build_csi_plugins.sh
    
    - stage: push_latest_multiarch
      services:
        - docker
      os: linux
      env: 
        - DOCKER_REGISTRY=quay.io/datashim-io
      script:
        - cd build-tools
        - make DOCKER_REGISTRY=${DOCKER_REGISTRY} push-multiarch